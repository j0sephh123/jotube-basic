# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ChannelForPlaylistResponse {
  id: Int!
  title: String!
}

"""Possible messages for channel creation responses"""
enum ChannelMessage {
  ALREADY_EXISTS
  CREATED_SUCCESSFULLY
  FAILED_TO_CREATE
  INVALID_VIDEO_ID
}

type ChannelMetadataResponse {
  fetchedUntilEnd: Boolean!
  id: Int!
  lastSyncedAt: String
  playlist: PlaylistInfo
  savedArtifactsCount: Int!
  screenshotArtifactsCount: Int!
  storyboardArtifactsCount: Int!
  thumbnailArtifactsCount: Int!
  title: String!
  videoArtifactsCount: Int!
  videoCount: Int!
}

type ChannelResponse {
  id: Float!
  title: String!
  ytId: String!
}

type ChannelUploadsResponse {
  createdAt: String!
  fetchStartVideoId: String!
  fetchedUntilEnd: Boolean!
  id: Int!
  lastSyncedAt: String
  src: String!
  title: String!
  updatedAt: String!
  uploads: [UploadsListUploadResponse!]!
  videoCount: Int!
  ytId: String!
}

type ChannelsDashboardResponse {
  channels: [DashboardChannelResponse!]!
  total: Int!
}

input CleanShortUploadsInput {
  ytChannelId: String!
}

type CleanShortUploadsResponse {
  deletedCount: Int!
}

input CreateChannelInput {
  ytVideoId: String!
}

type CreateChannelResponse {
  message: ChannelMessage!
  ytChannelId: String
}

input CreateTodoInput {
  description: String!
  title: String!
}

type DashboardChannelResponse {
  createdAt: DateTime!
  defaults: Int!
  id: Int!
  lastSyncedAt: DateTime
  playlist: DashboardPlaylistResponse
  saved: Int!
  screenshotsCount: Int!
  src: String!
  storyboard: Int!
  thumbnails: Int!
  title: String!
  videoCount: Int!
  ytId: String!
}

type DashboardPlaylistResponse {
  id: Int!
  name: String!
}

type DashboardVideoResponse {
  channelId: Int!
  channelTitle: String!
  channelYtId: String!
  id: Int!
  screenshotCount: Int!
  src: String!
  title: String!
  ytId: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeleteChannelResponse {
  message: String!
  success: Boolean!
}

type DeleteUploadsResponse {
  success: Boolean!
}

input FetchDashboardInput {
  defaultMax: Float
  defaultMin: Float
  max: Float
  min: Float
  page: Float!
  sortOrder: String!
  viewType: ViewType
}

input FetchUploadsInput {
  ytChannelId: String!
}

type FetchUploadsResponse {
  message: String!
  success: Boolean!
  uploadIds: [String!]
}

type FinishProcessUploadResponse {
  artifact: String!
  id: Float!
  ytId: String!
}

input GetSlidesInput {
  ytChannelIds: [String!]
}

type GetSlidesResponse {
  id: Float!
  isFav: Boolean
  second: Float!
  src: String!
  ytVideoId: String!
}

type Mutation {
  cleanShortUploads(cleanShortUploadsInput: CleanShortUploadsInput!): CleanShortUploadsResponse!
  createChannel(createChannelInput: CreateChannelInput!): CreateChannelResponse!
  createTodo(createTodoInput: CreateTodoInput!): Todo!
  deleteChannel(id: Float!): DeleteChannelResponse!
  deleteUploads(ytChannelId: String!, ytVideoIds: [String!]!): DeleteUploadsResponse!
  fetchUploads(fetchUploadsInput: FetchUploadsInput!): FetchUploadsResponse!
  finishProcessingUpload(savedSeconds: [Float!]!, ytChannelId: String!, ytVideoId: String!): FinishProcessUploadResponse!
  removeTodo(id: ID!): Boolean!
  saveUpload(saveUploadInput: SaveUploadInput!): SaveUploadResponse!
  syncUploads(syncUploadsInput: SyncUploadsInput!): SyncUploadsResponse!
  updateTodo(id: ID!, updateTodoInput: UpdateTodoInput!): Todo!
}

type PlaylistInfo {
  id: Int!
  name: String!
}

type Query {
  channelForPlaylist(ytChannelId: String!): ChannelForPlaylistResponse!
  channelMetadata(ytChannelId: String!): ChannelMetadataResponse!
  channelScreenshots(ytChannelId: String!): [GetSlidesResponse!]!
  fetchDashboard(fetchDashboardInput: FetchDashboardInput!): ChannelsDashboardResponse!
  fetchVideosDashboard(page: Float, screenshotMax: Float, screenshotMin: Float, sortOrder: String): VideosDashboardResponse!
  getSlides(input: GetSlidesInput!): [GetSlidesResponse!]!
  savedUploads(savedUploadsInput: SavedUploadsInput!): [SavedUploadsResponse!]!
  screenshots: [ScreenshotsCountsResponse!]!
  screenshotsByVideo(ytVideoId: String!): [VideoScreenshotResponse!]!
  statisticsCounts: StatisticsCountsResponse!
  storyboards(ytChannelId: String!): [UploadsVideoStoryboardResponse!]!
  thumbnailByVideoId(ytVideoId: String!): ThumbnailByVideoIdResponse
  todo(id: ID!): Todo!
  todos: [Todo!]!
  uploadsList(uploadsListInput: UploadsListInput!): ChannelUploadsResponse
  uploadsWithStoryboards(input: StoryboardQueryInput!): [UploadWithStoryboardResponse!]!
  uploadsWithThumbnails(input: UploadsWithThumbnailsInput!): [UploadsWithThumbnailsResponse!]!
}

input SaveUploadInput {
  uploads: [SaveUploadItemInput!]!
}

input SaveUploadItemInput {
  ytChannelId: String!
  ytVideoId: String!
}

type SaveUploadResponse {
  message: String!
  success: Boolean!
}

input SavedUploadsInput {
  ytChannelIds: [String!]!
}

type SavedUploadsResponse {
  channel: UploadsChannelResponse
  totalUploads: Int!
  uploads: [UploadResponse!]!
  ytChannelId: String!
}

type ScreenshotsCountsResponse {
  count: Float!
  month: String!
}

"""Sort order for uploads list"""
enum SortOrder {
  ASC
  DESC
}

type StatisticsCountsResponse {
  totalSaved: Float!
  totalScreenshots: Float!
  totalThumbnails: Float!
}

type StoryboardDataResponse {
  createdAt: String!
  fragments: Int!
  id: Int!
  updatedAt: String!
  url: String!
}

type StoryboardFragmentResponse {
  createdAt: String!
  fragments: Int!
  id: Int!
  updatedAt: String!
  uploadsVideoId: Int!
  url: String!
}

input StoryboardQueryInput {
  ytChannelId: String!
}

input SyncUploadsInput {
  channelId: Int!
  ytChannelId: String!
}

type SyncUploadsResponse {
  count: Int!
}

type ThumbnailByVideoIdResponse {
  createdAt: String!
  id: Float!
  perRow: Float!
  thumbnailsCount: Float!
  totalSeconds: Float!
  updatedAt: String!
  uploadsVideo: UploadsVideoResponse!
  uploadsVideoId: Float!
}

type Todo {
  completed: Boolean!
  createdAt: DateTime!
  description: String!
  id: ID!
  title: String!
  updatedAt: DateTime!
}

input UpdateTodoInput {
  completed: Boolean
  description: String
  title: String
}

type UploadResponse {
  artifact: String!
  createdAt: String!
  duration: Int
  id: Int!
  publishedAt: String!
  src: String!
  title: String!
  ytId: String!
}

type UploadWithStoryboardResponse {
  artifact: String!
  channelId: Int!
  createdAt: String!
  duration: Int
  id: Int!
  nextPageToken: String
  publishedAt: String!
  src: String!
  storyboard: StoryboardFragmentResponse!
  title: String!
  updatedAt: String!
  ytId: String!
}

type UploadsChannelResponse {
  id: Int!
  src: String!
  title: String!
  totalUploads: Int!
  uploads: [UploadResponse!]!
  ytId: String!
}

input UploadsListInput {
  sortOrder: SortOrder!
  ytChannelId: String!
}

type UploadsListUploadResponse {
  artifact: String!
  channelId: Int!
  createdAt: String!
  duration: Int
  id: Int!
  nextPageToken: String
  publishedAt: String!
  src: String!
  title: String!
  updatedAt: String!
  ytId: String!
}

type UploadsVideoResponse {
  channel: ChannelResponse!
  ytId: String!
}

type UploadsVideoStoryboardResponse {
  artifact: String!
  channelId: Int!
  createdAt: String!
  duration: Int
  id: Int!
  nextPageToken: String
  publishedAt: String!
  src: String!
  storyboard: StoryboardDataResponse!
  title: String!
  updatedAt: String!
  ytId: String!
}

input UploadsWithThumbnailsInput {
  channelIds: [Float!]!
}

type UploadsWithThumbnailsResponse {
  ytChannelId: String!
  ytVideoId: String!
}

type VideoScreenshotResponse {
  id: Float!
  isFav: Boolean
  second: Float!
  src: String!
  ytChannelId: String!
  ytVideoId: String!
}

type VideosDashboardResponse {
  total: Int!
  videos: [DashboardVideoResponse!]!
}

"""Available view types for dashboard filtering"""
enum ViewType {
  HAS_STORYBOARDS
  NO_SCREENSHOTS
  NO_UPLOADS
  PROCESSED
  SAVED
  THUMBNAILS
}