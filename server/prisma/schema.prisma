generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Channel {
  id                Int            @id @default(autoincrement())
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  title             String         @unique @db.VarChar(255)
  ytId              String         @unique @db.VarChar(24)
  src               String         @unique @db.VarChar(255)
  videoCount        Int
  fetchStartVideoId String         @db.VarChar(11)
  fetchedUntilEnd   Boolean        @default(false)
  lastSyncedAt      DateTime?
  playlistId        Int?
  playlist          Playlist?      @relation(fields: [playlistId], references: [id])
  screenshots       Screenshot[]
  uploads           UploadsVideo[]

  @@index([playlistId])
}

model UploadsVideo {
  id            Int          @id @default(autoincrement())
  ytId          String       @unique @db.VarChar(11)
  title         String
  publishedAt   String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  channelId     Int
  src           String
  nextPageToken String?
  duration      Int?
  artifact      ArtifactType @default(VIDEO)
  storyboard    Storyboard?
  thumbnail     Thumbnail?
  channel       Channel      @relation(fields: [channelId], references: [id], onDelete: Cascade)

  processingPhases ProcessingPhase[]

  @@index([channelId, artifact])
}

enum Phase {
  DOWNLOAD
  SCREENSHOTS
  THUMBNAILS
}

model ProcessingPhase {
  id             Int   @id @default(autoincrement())
  uploadsVideoId Int
  phase          Phase

  // createdAt is the phase "start" timestamp
  createdAt DateTime  @default(now())
  // endedAt is set when the phase completes
  endedAt   DateTime?

  uploadsVideo UploadsVideo @relation(fields: [uploadsVideoId], references: [id], onDelete: Cascade)

  @@unique([uploadsVideoId, phase])
  @@index([uploadsVideoId, phase, endedAt])
}

model Thumbnail {
  id             Int          @id @default(autoincrement())
  uploadsVideoId Int          @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  perRow         Int
  totalSeconds   Int          @default(0)
  uploadsVideo   UploadsVideo @relation(fields: [uploadsVideoId], references: [id], onDelete: Cascade)
}

model Storyboard {
  id             Int          @id @default(autoincrement())
  uploadsVideoId Int          @unique
  fragments      Int
  url            String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  uploadsVideo   UploadsVideo @relation(fields: [uploadsVideoId], references: [id], onDelete: Cascade)
}

model Screenshot {
  id            Int                         @id @default(autoincrement())
  createdAt     DateTime                    @default(now())
  updatedAt     DateTime                    @updatedAt
  second        Int
  ytChannelId   String
  ytVideoId     String
  isFav         Boolean?
  featuredLinks ChannelFeaturedScreenshot[]
  channel       Channel                     @relation(fields: [ytChannelId], references: [ytId], onDelete: Cascade)

  @@index([ytChannelId])
  @@index([ytVideoId], map: "idx_screenshot_ytVideoId")
}

model ChannelFeaturedScreenshot {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  channelId    Int
  screenshotId Int
  screenshot   Screenshot @relation(fields: [screenshotId], references: [id], onDelete: Cascade)

  @@unique([channelId, screenshotId])
  @@index([channelId])
  @@index([screenshotId])
}

model Playlist {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  channels  Channel[]
}

enum ArtifactType {
  VIDEO
  SAVED
  DOWNLOADED
  STORYBOARD
  THUMBNAIL
  SCREENSHOT
}

model TV {
  id         Int      @id @default(autoincrement())
  identifier String   @unique @db.VarChar(255)
  title      String   @unique @db.VarChar(255)
  // Optional, positive: use UNSIGNED to prevent negatives
  duration   Int?     @db.UnsignedInt
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  episodes Episode[]
}

model Episode {
  id          Int       @id @default(autoincrement())
  identifier  String    @unique @db.VarChar(255)
  title       String    @unique @db.VarChar(255)
  artifact    String    @db.VarChar(255)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  tvId Int
  tv   TV  @relation(fields: [tvId], references: [id], onDelete: Cascade)

  @@index([tvId])
}
